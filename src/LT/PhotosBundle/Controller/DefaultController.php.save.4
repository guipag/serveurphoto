<?php

namespace LT\PhotosBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Doctrine\Common\Collections\ArrayCollection;
use LT\PhotosBundle\Entity\Photo;
use LT\PhotosBundle\Entity\Event;
use LT\PhotosBundle\Entity\FormContact;
use LT\PhotosBundle\Form\PhotoType;
use LT\PhotosBundle\Form\EventType;
use LT\PhotosBundle\Form\EventSearchType;
use LT\PhotosBundle\Form\DataTransformer\PhotosTransformer;

class DefaultController extends Controller
{
    public function indexAction()
    {
        return $this->render('LTPhotosBundle:Default:index.html.twig');
    }

    public function recentAction() {
	$repository = $this
	  ->getDoctrine()
	  ->getManager()
	  ->getRepository('LTPhotosBundle:Event')
	;
	$formatDate = $this->get('lt_photos.scolardate');

	$listEvents = $repository->findBy(
	  array(), // Critere
	  array('date' => 'desc'),        // Tri
	  10,                              // Limite
	  0                               // Offset
	);

	return $this->render('LTPhotosBundle:Default:recent.html.twig', array('listEvents' => $listEvents));
    }

    public function yearAction($year1, $year2) {
	$repository = $this
	  ->getDoctrine()
	  ->getManager()
	  ->getRepository('LTPhotosBundle:Event')
	;

	$listEvents = $repository->findByScolarYear($year1, $year2);

	return $this->render('LTPhotosBundle:Default:year.html.twig', array('listEvents' => $listEvents));
    }

    public function eventAction() {
	$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Event');

	$listEvents = $repository->findThisYear();

	return $this->render('LTPhotosBundle:Default:recent.html.twig', array('listEvents' => $listEvents));
    }

    public function photographAction($year1, $year2, $slug) {

	return $this->redirect($this->generateUrl('lt_photos_gallery'));
	/*$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Event');
	$event = $repository->findOneBy(array('slug' => $slug));

	$photographs = $event->getPhotographs();

	return $this->render('LTPhotosBundle:Default:choicePhotograph.html.twig', array('photographs' => $photographs));*/
    }

    public function archivesAction() {
	$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Event');
	$firstEvent = $repository->findBy(
	  array(),
	  array('date' => 'asc'),
	  1,
	  0
	);

	$lastEvent = $repository->findBy(
	  array(),
	  array('date' => 'desc'),
	  1,
	  0
	);

	$firstYear = $firstEvent[0]->getDate()->format('Y') + floor($firstEvent[0]->getDate()->format('m') / 9) - 1;
	$lastYear = $lastEvent[0]->getDate()->format('Y') + floor($lastEvent[0]->getDate()->format('m') /9) - 1;

	$j=0;
	for ($i = $firstYear ; $i <= $lastYear ; $i++) {
	    $years[$j] = strval($i)."-".strval($i+1);
	    $j++;
	}

	return $this->render('LTPhotosBundle:Default:archives.html.twig', array('years' => $years));
    }

    public function galleryAction($year1, $year2, $slug, $photograph) {
	$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Event');
	$event = $repository->findOneBy(array('slug' => $slug));

	$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Photograph');
	$photograph = $repository->find(array('id' => $photograph));

	$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Photo');
	$photos = $repository->findBy(
	    array('event' => $event, 'valid' => true),
	    array(),
	    null,
	    null);

	return $this->render('LTPhotosBundle:Default:gallery.html.twig', array('photos' => $photos, 'photographs' => $event->getPhotographs()));
    }

    public function contactAction(Request $request) {
	$formcontact = new FormContact();
	$formBuilder = $this->get('form.factory')->createBuilder('form', $formcontact);

	$formBuilder
	  ->add('name', 'text')
	  ->add('mail', 'text')
	  ->add('object', 'text')
	  ->add('content', 'textarea')
	  ->add('send', 'submit')
	;

	$form = $formBuilder->getForm();

	$form->handleRequest($request);

	if ($form->isValid()) {
	    //envoyer le mail
	    $request->getSession()->getFlashBag()->add('notice', 'Le message a bien été envoyé.');
	}

	return $this->render('LTPhotosBundle:Default:contact.html.twig', array('form' => $form->createView(),));
    }

    public function uploadAction(Request $request) {
	$photo = new Photo();

	$photograph = $this->getUser()->getPhotograph();

	$photo->setPhotograph($photograph);

	$form = $this->get('form.factory')->create(new PhotoType, $photo);

	//création d'un évènement
	$new_event = new Event();
	$form_event = $this->createForm(new EventType(), $new_event, array(
        	    'action' => $this->generateUrl('event_create'),
        	    'method' => 'POST',
        ));

        $form_event->add('submit', 'submit', array('label' => 'Créer'));
	//formulaire de création d'un nouvel event

	if ($form->handleRequest($request)->isValid()) {
	    $em = $this->getDoctrine()->getManager();
	    if (!in_array($photograph, $photo->getEvent()->getPhotographs()->toArray())) 
		$photo->getEvent()->addPhotograph($photo->getPhotograph());

	    $em->persist($photo);
	    $em->flush();
	    //rediriger vers une page
	}

	$events = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Event')->findAll();

	return $this->render('LTPhotosBundle:Default:upload.html.twig', array('form' => $form->createView(), 'form_event' => $form_event->createView(), 'events' => $events));
    }

    public function uploadPhotosAction(Request $request, $slug) {
        $repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Event');
        $event = $repository->findOneBy(array('slug' => $slug));
	$photo = new Photo();

	$form = $this->createFormBuilder(array())
			->add('files', 'file', array('attr' => array('multiple' => true)))
			->add('save', 'submit')
			->getForm();

	$form->handleRequest($request);

	if ($form->isValid()) {
            $data = $form->getData();
	    $photograph = $this->getUser()->getPhotograph();
	    $em = $this->getDoctrine()->getManager();

	    foreach($data['files'] as $file) {
		$photo = new Photo();
		$photo->setFile($file);
		$photo->setPhotograph($photograph);
		$photo->setValid(false);
		$event->addPhoto($photo);
                if (!in_array($photograph, $photo->getEvent()->getPhotographs()->toArray()))
                    $photo->getEvent()->addPhotograph($photo->getPhotograph());
		$em->persist($event);

		//gestion de l'ACL OWNER -- mais ça marche pas :'(
/*		$aclProvider = $this->get('security.acl.provider');
		$objectIdentity = ObjectIdentity::fromDomainObject($photo);
		$acl = $aclProvider->createAcl($objectIdentity);

		$securityContext = $this->get('security.context');
		$user = $securityContext->getToken()->getUser();
		$securityIdentity = UserSecurityIdentity::fromAccount($user);

		$acl->insertObjectAce($securityIdentity, MaskBuilder::MASK_OWNER);
		$aclProvider->updateAcl($acl);
*/	    }
            $em = $this->getDoctrine()->getManager();
            $em->persist($event);
            $em->flush();

/*$repository = $this->getDoctrine()->getManager()->getRepository('LTPhotosBundle:Photograph');
            $photograph = $repository->find(2);

	    
            $photo->setPhotograph($photograph);
            $event->addPhoto($photo);
            if (!in_array($photograph, $photo->getEvent()->getPhotographs()->toArray()))
                $photo->getEvent()->addPhotograph($photo->getPhotograph());
	    $em = $this->getDoctrine()->getManager();
	    $em->persist($event);
            $em->flush();*/
	}
$form=$form->createView();
$form->children['files']->vars['full_name'] = 'form[files][]';
	return $this->render('LTPhotosBundle:Default:uploadPhotos.html.twig', array('form' => $form));
    }

    public function eventSearchAction(Request $request) {
	if ($request->isXmlHttpRequest()) {
	    $motcle = '';
	    $motcle = $request->request->get('motcle');
	    $em = $this->container->get('doctrine')->getEntityManager();

	    if ($motcle != '') {
		$qb = $em->createQueryBuilder();

		$qb->select('a')
		   ->from('LTPhotosBundle:Event', 'a')
		   ->where('a.name LIKE :motcle OR a.slug LIKE :motcle')
		   ->orderBy('a.date', 'DESC')
		   ->setParameter(':motcle', '%'.$motcle.'%');

		$events = $qb->getQuery()->getResult();
	    }
	    else {
		$events = $em->getRepository('LTPhotosBundle:Event')->findAll();
	    }

	    return $this->container->get('templating')->renderResponse('LTPhotosBundle:Default:listEvent.html.twig', array('events' => $events));
	}
    }
}

