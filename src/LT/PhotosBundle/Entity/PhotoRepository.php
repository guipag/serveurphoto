<?php

namespace LT\PhotosBundle\Entity;

use Doctrine\ORM\EntityRepository;
use LT\PhotosBundle\Entity\Event;
use LT\PhotosBundle\Entity\Category;

/**
 * PhotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhotoRepository extends EntityRepository {
  public function getPhotosViewable(Event $event, Category $category = null) {
    $qb    = $this->createQueryBuilder('p');

    $qb->join('p.event','e')->addSelect('e');
    if ($category != null)
      $qb->join('p.category','c')->addSelect('c');

    $qb->where('e.id = :id_event')->setParameter('id_event', $event->getId());
    $qb->andWhere('p.valid = true');
    $qb->andWhere('p.censured = false');

    if ($category !== null)
      $qb->andWhere('c.id = :id_cat')->setParameter('id_cat', $category->getId());

    $qb->orderBy('p.originalName', 'ASC');

    return $qb->getQuery()->getResult();
  }

  public function getPhotosViewableWithPhotograph(Photograph $photograph, Event $event, Category $category = null) {
    $qb    = $this->createQueryBuilder('p');

    $qb->join('p.event','e')->addSelect('e');
    if ($category != null)
      $qb->join('p.category','c')->addSelect('c');

    $qb->join('p.photograph','h')->addSelect('h');

    $qb->where('e.id = :id_event')->setParameter('id_event', $event->getId());
    $qb->andWhere('p.valid = true');
    $qb->andWhere('p.censured = false');

    if ($category !== null)
      $qb->andWhere('c.id = :id_cat')->setParameter('id_cat', $category->getId());

    $qb->andWhere('h.id = :id_photograph')->setParameter('id_photograph', $photograph->getId());

    $qb->orderBy('p.originalName', 'ASC');

    return $qb->getQuery()->getResult();
  }

  public function getAllPhotos(Event $event, Category $category = null) {
    $qb    = $this->createQueryBuilder('p');

    $qb->join('p.event','e')->addSelect('e');
    if ($category !== null)
      $qb->join('p.category','c')->addSelect('c');

    $qb->where('e.id = :id_event')->setParameter('id_event', $event->getId());

    if ($category !== null)
      $qb->andWhere('c.id = :id_cat')->setParameter('id_cat', $category->getId());

    return $qb->getQuery()->getResult();
  }

  public function getOnePhotoViewable(Event $event, Category $category = null) {
    $qb = $this->createQueryBuilder('p');

    $qb->join('p.event','e')->addSelect('e');
    if ($category !== null)
      $qb->join('p.category','c')->addSelect('c');

    $qb->where('e.id = :id_event')->setParameter('id_event', $event->getId());
    $qb->andWhere('p.valid = true');
    $qb->andWhere('p.censured = false');

    if ($category !== null)
      $qb->andWhere('c.id = :id_cat')->setParameter('id_cat', $category->getId());

    //ne prendre qu'une seule image
    $qb->orderBy('p.id', 'DESC')->setMaxResults(1);

    return $qb->getQuery()->getOneOrNullResult();
  }
}
